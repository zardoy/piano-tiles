{"version":3,"sources":["Game.tsx","MainMenu.tsx","App.tsx","index.tsx"],"names":["gameConfig","maxWidth","tilesQuantity","width","height","showKeyboardOrGamepadHints","controlsMap","1","2","3","4","getRandomTilePos","_","random","useStyles","makeStyles","canvas","overflow","score","position","top","left","right","fontFamily","fontWeight","pointerEvents","backButton","fontSize","Game","classes","canvasRef","useRef","useState","setScore","useEffect","current","ctx","getContext","getTileSize","tilePositions","times","offsetPerc","activeInput","render","clearRect","lineWidth","beginPath","tileSize","offset","xRel","x","moveTo","lineTo","yRel","y","stroke","forEach","xPos","yPos","posFromEnd","length","clickedAnim","undefined","fillStyle","startPos","fillRect","drawTile","Math","min","font","textAlign","tileNumber","slice","keyboardKey","toString","split","fillText","resize","window","innerWidth","innerHeight","registerHit","interval","setInterval","clearInterval","pop","unshift","console","log","pointerHandle","event","clientY","canvasX","clientX","canvasY","ceil","canvasClick","offsetY","offsetX","cancelTouchMove","preventDefault","addEventListener","keyboard","Keyboard","gamepad","Gamepad","inputReleased","somethingWasPressed","gamepadButton","controlsOr","key","button","query","isConnected","detectKeyboardInput","removeEventListener","Button","className","hidden","component","Link","to","color","ArrowBackIos","Grid","container","justify","ref","Typography","align","variant","gameModes","label","id","BigText","props","gutterBottom","MainMenu","direction","alignContent","style","padding","map","modeId","RouterLink","size","prop","Slider","defaultValue","valueLabelDisplay","step","max","onChange","val","marks","Checkbox","defaultChecked","checked","href","bottom","App","CssBaseline","path","exact","from","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c4fa553c.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nimport { Gamepad, Keyboard, or as controlsOr } from \"contro\";\nimport _ from \"lodash\";\nimport { Link } from \"react-router-dom\";\n\nimport { Button, Grid, makeStyles, Typography } from \"@material-ui/core\";\nimport { ArrowBackIos } from \"@material-ui/icons\";\n\nexport const gameConfig = {\n    maxWidth: 600,\n    tilesQuantity: {\n        width: 4,\n        height: 4\n    },\n    showKeyboardOrGamepadHints: true\n};\n\nconst controlsMap: Record<string, string> = {\n    // keyboard key then xbox controller button\n    1: \"D A\",\n    2: \"F B\",\n    3: \"J X\",\n    4: \"K Y\",\n};\n\nconst getRandomTilePos = () => _.random(gameConfig.tilesQuantity.width - 1);\n\nconst useStyles = makeStyles({\n    canvas: {\n        width: \"100%\",\n        height: \"100vh\",\n        overflow: \"hidden\",\n        maxWidth: gameConfig.maxWidth\n    },\n    score: {\n        position: \"fixed\",\n        top: 0,\n        left: 0,\n        right: 0,\n        fontFamily: \"Graduate\",\n        fontWeight: \"bold\",\n        pointerEvents: \"none\"\n    },\n    backButton: {\n        position: \"fixed\",\n        top: 0,\n        left: 0,\n        fontSize: \"1.2em\"\n    }\n});\n\nconst Game: React.FC = () => {\n    const classes = useStyles();\n\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    const [score, setScore] = useState(0);\n\n    useEffect(() => {\n        // todo: replace with engine\n\n        const canvas = canvasRef.current!;\n        const ctx = canvas.getContext(\"2d\")!;\n\n        const getTileSize = () => {\n            return {\n                width: canvas.width / tilesQuantity.width,\n                height: canvas.height / tilesQuantity.height,\n            };\n        };\n\n        const { tilesQuantity } = gameConfig;\n\n        const resetTilePositions = () => _.times(tilesQuantity.height + 1, getRandomTilePos);\n\n        let tilePositions = resetTilePositions();\n\n        let offsetPerc = 0;\n\n        let activeInput: \"touch\" | \"keyboard\" | \"gamepad\" = \"touch\";\n\n        const render = () => {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.lineWidth = 0.5;\n            ctx.beginPath();\n\n            const tileSize = getTileSize();\n\n            const offset = offsetPerc * tileSize.height;\n\n            _.times(tilesQuantity.width, xRel => {\n                const x = xRel / tilesQuantity.width * canvas.width;\n                ctx.moveTo(x, 0);\n                ctx.lineTo(x, canvas.height);\n            });\n            _.times(tilesQuantity.height, yRel => {\n                const y = yRel * tileSize.height + offset;\n                ctx.moveTo(0, y);\n                ctx.lineTo(canvas.width, y);\n            });\n            ctx.stroke();\n\n            // not the best implementation tbh\n            const drawTile = (xPos: number, yPos: number, clickedAnim?: number) => {\n                if (clickedAnim !== undefined) {\n                    ctx.fillStyle = \"#afaeae\";\n                }\n                const startPos = {\n                    x: xPos * tileSize.width,\n                    y: yPos * tileSize.height + offset\n                };\n                ctx.fillRect(\n                    startPos.x,\n                    startPos.y,\n                    tileSize.width,\n                    tileSize.height\n                );\n                ctx.fillStyle = \"black\";\n                if (clickedAnim) {\n                    ctx.fillRect(\n                        startPos.x + clickedAnim,\n                        startPos.y + clickedAnim,\n                        tileSize.width - clickedAnim * 2,\n                        tileSize.height - clickedAnim * 2\n                    );\n                }\n            };\n\n            tilePositions.forEach((xPos, yPos) => {\n                const posFromEnd = tilePositions.length - 1 - yPos;\n                drawTile(\n                    xPos,\n                    yPos - 1,\n                    posFromEnd === 0 ? 0 :\n                        posFromEnd === 1 && offset ? Math.min(offset, 10) :\n                            undefined\n                );\n            });\n\n            if (activeInput !== \"touch\" && gameConfig.showKeyboardOrGamepadHints) {\n                ctx.fillStyle = \"white\";\n                ctx.font = \"60px sans-serif\";\n                ctx.textAlign = \"center\";\n                const tileNumber = tilePositions.slice(-2)[0] + 1;\n                const keyboardKey = tilesQuantity.width > 4 ? tileNumber.toString() : controlsMap[tileNumber].split(\" \")[0];\n                ctx.fillText(\n                    activeInput === \"keyboard\" ? keyboardKey :\n                        controlsMap[tileNumber].split(\" \")[1],\n                    tileSize.width * tilePositions.slice(-2)[0] + tileSize.width / 2,\n                    tileSize.height * (tilesQuantity.height - 2) + tileSize.height / 2\n                );\n                ctx.fillStyle = \"black\";\n            }\n        };\n        const resize = () => {\n            canvas.width = Math.min(window.innerWidth, gameConfig.maxWidth);\n            canvas.height = window.innerHeight;\n            render();\n        };\n        resize();\n        const registerHit = (xPos: number) => {\n            if (xPos === tilePositions.slice(-2)[0]) {\n                setScore(score => score + 1);\n                // todo-high: use javascript.info animation approach to increase fps\n                const interval = setInterval(() => {\n                    if ((offsetPerc += 0.15) >= 1) {\n                        clearInterval(interval);\n                        offsetPerc = 0;\n                        tilePositions.pop();\n                        tilePositions.unshift(getRandomTilePos());\n                    }\n                    render();\n                }, 5);\n            } else {\n                console.log(\"Wrong tile\", xPos, tilePositions.slice(-2)[0]);\n                // tilePositions = resetTilePositions();\n                setScore(0);\n            }\n            render();\n        };\n        const canvasClick = ({ clientY, clientX }: { clientY: number, clientX: number; }) => {\n            // let boundingClientReact = canvas.getBoundingClientRect();\n            // let canvasX = clientX - boundingClientReact.left;\n            // let canvasY = clientY - boundingClientReact.top;\n            let canvasX = clientX;\n            let canvasY = clientY;\n            const tileSize = getTileSize();\n            if (\n                canvasY < (tilesQuantity.height - 2) * tileSize.height ||\n                canvasY > (tilesQuantity.height - 1) * tileSize.height\n            ) return;\n            const xPos = Math.ceil(canvasX / (canvas.width / tilesQuantity.width)) - 1;\n            registerHit(xPos);\n        };\n        const pointerHandle = (event: PointerEvent) => {\n            activeInput = \"touch\";\n            // todo investigate\n            canvasClick({ clientY: event.offsetY, clientX: event.offsetX });\n        };\n        const cancelTouchMove = (event: TouchEvent) => event.preventDefault();\n        window.addEventListener(\"resize\", resize);\n        canvas.addEventListener(\"pointerdown\", pointerHandle);\n        canvas.addEventListener(\"touchstart\", cancelTouchMove);\n\n        // handle keyboard & gamepad input\n        const keyboard = new Keyboard();\n        const gamepad = new Gamepad();\n\n        let inputReleased = true;\n\n        const interval = setInterval(() => {\n            // todo fix types\n            let somethingWasPressed = false;\n            for (const tileNumber in controlsMap) {\n                const [keyboardKey, gamepadButton] = controlsMap[tileNumber].split(\" \");\n                const pressed = controlsOr(\n                    keyboard.key(keyboardKey),\n                    keyboard.key(tileNumber),\n                    gamepad.button(gamepadButton),\n                ).query();\n                if (!pressed) continue;\n                somethingWasPressed = true;\n                if (inputReleased) registerHit(+tileNumber - 1);\n                break;\n            }\n            inputReleased = !somethingWasPressed;\n            if (somethingWasPressed && gamepad.isConnected()) activeInput = \"gamepad\";\n        }, 10);\n        const detectKeyboardInput = () => {\n            activeInput = \"keyboard\";\n            render();\n        };\n        window.addEventListener(\"keydown\", detectKeyboardInput);\n        return () => {\n            window.removeEventListener(\"resize\", resize);\n            canvas.removeEventListener(\"pointerdown\", pointerHandle);\n            canvas.removeEventListener(\"touchstart\", cancelTouchMove);\n            window.removeEventListener(\"keydown\", detectKeyboardInput);\n            clearInterval(interval);\n        };\n    }, []);\n\n    return <>\n        <Button\n            className={classes.backButton}\n            hidden={score !== 0}\n            component={Link}\n            to=\"/\"\n            color=\"primary\"\n        // doesn't work properly with startIcon for some reason\n        >\n            <ArrowBackIos />Back\n        </Button>\n        <Grid container justify=\"center\">\n            <canvas\n                ref={canvasRef}\n                className={classes.canvas}\n            />\n        </Grid>\n        <Typography\n            align=\"center\"\n            color=\"error\"\n            className={classes.score}\n            variant=\"h3\"\n        >{score}</Typography>\n    </>;\n};\n\nexport default Game;\n","import React from \"react\";\n\nimport { Link as RouterLink } from \"react-router-dom\";\n\nimport { Button, Checkbox, Grid, Link, Slider, Typography } from \"@material-ui/core\";\n\nimport { gameConfig } from \"./Game\";\n\ninterface GameMode {\n    label: string;\n    id: string;\n}\n\nconst gameModes: GameMode[] = [{\n    label: \"Peak\",\n    id: \"peak\"\n}];\n\nconst BigText: React.FC<React.ComponentProps<typeof Typography>> = (props) => {\n    return <Typography gutterBottom align=\"center\" {...props} />;\n};\n\nconst MainMenu: React.FC = () => {\n    return <>\n        <Grid container direction=\"column\" justify=\"flex-start\" alignContent=\"center\" style={{ padding: 50 }}>\n            <BigText variant=\"h3\">Piano Tiles online</BigText>\n            <BigText variant=\"h5\" color=\"textSecondary\">Select Game Mode</BigText>\n            {\n                gameModes.map(({ id: modeId, label }) =>\n                    <Button\n                        key={modeId}\n                        component={RouterLink}\n                        to={`/game/${modeId}`}\n                        variant=\"outlined\"\n                        size=\"large\"\n                    >{label}</Button>\n                )\n            }\n            <BigText variant=\"h5\" color=\"textSecondary\">Game Grid Configuration</BigText>\n            <Grid container style={{ width: \"auto\" }}>\n                {\n                    ([\"width\", \"height\"] as (keyof typeof gameConfig.tilesQuantity)[]).map(prop => {\n                        const min = prop === \"height\" ? 2 : 1;\n                        return <>\n                            <Typography>{prop}</Typography>\n                            <Slider\n                                key={prop}\n                                defaultValue={gameConfig.tilesQuantity[prop]}\n                                valueLabelDisplay=\"auto\"\n                                step={1}\n                                min={min}\n                                max={8}\n                                onChange={(_, val) => gameConfig.tilesQuantity[prop] = val as number}\n                                marks\n                            />\n                        </>;\n                    })\n                }\n                <Typography>\n                    <Checkbox\n                        defaultChecked={gameConfig.showKeyboardOrGamepadHints}\n                        onChange={(_, checked) => gameConfig.showKeyboardOrGamepadHints = checked}\n                    />Show keyboard & gamepad hints\n                </Typography>\n            </Grid>\n            <Link color=\"textSecondary\" href=\"https://github.com/zardoy/piano-tiles\" style={{ position: \"absolute\", bottom: 0, right: 0, }}>View on GitHub</Link>\n        </Grid>\n    </>;\n};\n\nexport default MainMenu;","import React from \"react\";\n\nimport { MemoryRouter, Redirect, Route, Switch } from \"react-router-dom\";\n\nimport { CssBaseline } from \"@material-ui/core\";\n\nimport Game from \"./Game\";\nimport MainMenu from \"./MainMenu\";\n\nconst App: React.FC = () => {\n    return <>\n        <CssBaseline />\n        <MemoryRouter>\n            <Switch>\n                <Route path=\"/\" exact>\n                    <MainMenu />\n                </Route>\n                <Route path=\"/game/:modeId\">\n                    <Game />\n                </Route>\n                <Redirect from=\"/\" to=\"/\" />\n            </Switch>\n        </MemoryRouter>\n    </>;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport \"./global.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}